"use strict";(self.webpackChunkml_notebook=self.webpackChunkml_notebook||[]).push([[9742],{3905:(e,a,t)=>{t.d(a,{Zo:()=>i,kt:()=>d});var n=t(67294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var m=n.createContext({}),o=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},i=function(e){var a=o(e.components);return n.createElement(m.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},k=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,m=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),c=o(t),k=s,d=c["".concat(m,".").concat(k)]||c[k]||u[k]||r;return t?n.createElement(d,p(p({ref:a},i),{},{components:t})):n.createElement(d,p({ref:a},i))}));function d(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,p=new Array(r);p[0]=k;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l[c]="string"==typeof e?e:s,p[1]=l;for(var o=2;o<r;o++)p[o]=t[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},86767:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>N,contentTitle:()=>f,default:()=>x,frontMatter:()=>d,metadata:()=>h,toc:()=>y});var n=t(3905),s=Object.defineProperty,r=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,i=(e,a,t)=>a in e?s(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,c=(e,a)=>{for(var t in a||(a={}))m.call(a,t)&&i(e,t,a[t]);if(l)for(var t of l(a))o.call(a,t)&&i(e,t,a[t]);return e},u=(e,a)=>r(e,p(a)),k=(e,a)=>{var t={};for(var n in e)m.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&l)for(var n of l(e))a.indexOf(n)<0&&o.call(e,n)&&(t[n]=e[n]);return t};const d={},f="softmax\u56de\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0",h={unversionedId:"ch1p1/[6]softmax-regression-code",id:"ch1p1/[6]softmax-regression-code",title:"softmax\u56de\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0",description:"\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u52a8\u624b\u5b9e\u73b0softmax\u56de\u5f52\u3002\u9996\u5148\u5bfc\u5165\u672c\u8282\u5b9e\u73b0\u6240\u9700\u7684\u5305\u6216\u6a21\u5757\u3002",source:"@site/docs/ch1p1/[6]softmax-regression-code.mdx",sourceDirName:"ch1p1",slug:"/ch1p1/[6]softmax-regression-code",permalink:"/ch1p1/[6]softmax-regression-code",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"softmax\u56de\u5f52",permalink:"/ch1p1/[5]softmax-regression"},next:{title:"\u591a\u5c42\u611f\u77e5\u673a",permalink:"/ch1p2/[1]multilayer-perceptron"}},N={},y=[{value:"\u624b\u52a8\u5b9e\u73b0",id:"\u624b\u52a8\u5b9e\u73b0",level:2},{value:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e",id:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e",level:3},{value:"\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570",id:"\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570",level:3},{value:"\u5b9e\u73b0 softmax \u8fd0\u7b97",id:"\u5b9e\u73b0-softmax-\u8fd0\u7b97",level:3},{value:"\u5b9a\u4e49\u6a21\u578b",id:"\u5b9a\u4e49\u6a21\u578b",level:3},{value:"\u5b9a\u4e49\u635f\u5931\u51fd\u6570",id:"\u5b9a\u4e49\u635f\u5931\u51fd\u6570",level:3},{value:"\u8ba1\u7b97\u5206\u7c7b\u51c6\u786e\u7387",id:"\u8ba1\u7b97\u5206\u7c7b\u51c6\u786e\u7387",level:3},{value:"\u8bad\u7ec3\u6a21\u578b",id:"\u8bad\u7ec3\u6a21\u578b",level:3},{value:"\u9884\u6d4b",id:"\u9884\u6d4b",level:3},{value:"\u4f7f\u7528\u6846\u67b6\u5b9e\u73b0",id:"\u4f7f\u7528\u6846\u67b6\u5b9e\u73b0",level:2},{value:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e",id:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e-1",level:3},{value:"\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u6a21\u578b",id:"\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u6a21\u578b",level:3},{value:"softmax\u548c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570",id:"softmax\u548c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570",level:3},{value:"\u5b9a\u4e49\u4f18\u5316\u7b97\u6cd5",id:"\u5b9a\u4e49\u4f18\u5316\u7b97\u6cd5",level:3},{value:"\u8bad\u7ec3\u6a21\u578b",id:"\u8bad\u7ec3\u6a21\u578b-1",level:3},{value:"\u5c0f\u7ed3",id:"\u5c0f\u7ed3",level:2}],_={toc:y},g="wrapper";function x(e){var a=e,{components:s}=a,r=k(a,["components"]);return(0,n.kt)(g,u(c(c({},_),r),{components:s,mdxType:"MDXLayout"}),(0,n.kt)("h1",c({},{id:"softmax\u56de\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0"}),"softmax\u56de\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0"),(0,n.kt)("p",null,"\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u52a8\u624b\u5b9e\u73b0softmax\u56de\u5f52\u3002\u9996\u5148\u5bfc\u5165\u672c\u8282\u5b9e\u73b0\u6240\u9700\u7684\u5305\u6216\u6a21\u5757\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"import tensorflow as tf\nimport numpy as np\nprint(tf.__version__)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"2.0.0\n")),(0,n.kt)("h2",c({},{id:"\u624b\u52a8\u5b9e\u73b0"}),"\u624b\u52a8\u5b9e\u73b0"),(0,n.kt)("h3",c({},{id:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e"}),"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e"),(0,n.kt)("p",null,"\u6211\u4eec\u5c06\u4f7f\u7528Fashion-MNIST\u6570\u636e\u96c6\uff0c\u5e76\u8bbe\u7f6e\u6279\u91cf\u5927\u5c0f\u4e3a256\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"from tensorflow.keras.datasets import fashion_mnist\n\nbatch_size=256\n(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\nx_train = tf.cast(x_train, tf.float32) / 255 #\u5728\u8fdb\u884c\u77e9\u9635\u76f8\u4e58\u65f6\u9700\u8981float\u578b\uff0c\u6545\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4e3afloat\u578b\nx_test = tf.cast(x_test,tf.float32) / 255 #\u5728\u8fdb\u884c\u77e9\u9635\u76f8\u4e58\u65f6\u9700\u8981float\u578b\uff0c\u6545\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4e3afloat\u578b\ntrain_iter = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(batch_size)\ntest_iter = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(batch_size)\n")),(0,n.kt)("h3",c({},{id:"\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570"}),"\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570"),(0,n.kt)("p",null,"\u8ddf\u7ebf\u6027\u56de\u5f52\u4e2d\u7684\u4f8b\u5b50\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5411\u91cf\u8868\u793a\u6bcf\u4e2a\u6837\u672c\u3002\u5df2\u77e5\u6bcf\u4e2a\u6837\u672c\u8f93\u5165\u662f\u9ad8\u548c\u5bbd\u5747\u4e3a28\u50cf\u7d20\u7684\u56fe\u50cf\u3002\u6a21\u578b\u7684\u8f93\u5165\u5411\u91cf\u7684\u957f\u5ea6\u662f ",(0,n.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,n.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mn",{parentName:"mrow"},"28"),(0,n.kt)("mo",{parentName:"mrow"},"\xd7"),(0,n.kt)("mn",{parentName:"mrow"},"28"),(0,n.kt)("mo",{parentName:"mrow"},"="),(0,n.kt)("mn",{parentName:"mrow"},"784")),(0,n.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"28 \\times 28 = 784")))),(0,n.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"28"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"28"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2778em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mrel"}),"="),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2778em"}}))),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"784"))))),"\uff1a\u8be5\u5411\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u3002\u7531\u4e8e\u56fe\u50cf\u670910\u4e2a\u7c7b\u522b\uff0c\u5355\u5c42\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u5c42\u7684\u8f93\u51fa\u4e2a\u6570\u4e3a10\uff0c\u56e0\u6b64softmax\u56de\u5f52\u7684\u6743\u91cd\u548c\u504f\u5dee\u53c2\u6570\u5206\u522b\u4e3a",(0,n.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,n.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mn",{parentName:"mrow"},"784"),(0,n.kt)("mo",{parentName:"mrow"},"\xd7"),(0,n.kt)("mn",{parentName:"mrow"},"10")),(0,n.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"784 \\times 10")))),(0,n.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"784"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"10"))))),"\u548c",(0,n.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex"}),(0,n.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,n.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mn",{parentName:"mrow"},"1"),(0,n.kt)("mo",{parentName:"mrow"},"\xd7"),(0,n.kt)("mn",{parentName:"mrow"},"10")),(0,n.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"1 \\times 10")))),(0,n.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"1"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,n.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,n.kt)("span",c({parentName:"span"},{className:"base"}),(0,n.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,n.kt)("span",c({parentName:"span"},{className:"mord"}),"10"))))),"\u7684\u77e9\u9635\u3002",(0,n.kt)("inlineCode",{parentName:"p"},"Variable"),"\u6765\u6807\u6ce8\u9700\u8981\u8bb0\u5f55\u68af\u5ea6\u7684\u5411\u91cf\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"num_inputs = 784\nnum_outputs = 10\nW = tf.Variable(tf.random.normal(shape=(num_inputs, num_outputs), mean=0, stddev=0.01, dtype=tf.float32))\nb = tf.Variable(tf.zeros(num_outputs, dtype=tf.float32))\n")),(0,n.kt)("h3",c({},{id:"\u5b9e\u73b0-softmax-\u8fd0\u7b97"}),"\u5b9e\u73b0 softmax \u8fd0\u7b97"),(0,n.kt)("p",null,"\u5728\u4ecb\u7ecd\u5982\u4f55\u5b9a\u4e49 softmax \u56de\u5f52\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u63cf\u8ff0\u4e00\u4e0b\u5bf9\u5982\u4f55\u5bf9\u591a\u7ef4",(0,n.kt)("inlineCode",{parentName:"p"},"Tensor"),"\u6309\u7ef4\u5ea6\u64cd\u4f5c\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a",(0,n.kt)("inlineCode",{parentName:"p"},"Tensor"),"\u77e9\u9635",(0,n.kt)("inlineCode",{parentName:"p"},"X"),"\u3002\u6211\u4eec\u53ef\u4ee5\u53ea\u5bf9\u5176\u4e2d\u540c\u4e00\u5217\uff08",(0,n.kt)("inlineCode",{parentName:"p"},"axis=0"),"\uff09\u6216\u540c\u4e00\u884c\uff08",(0,n.kt)("inlineCode",{parentName:"p"},"axis=1"),"\uff09\u7684\u5143\u7d20\u6c42\u548c\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u4fdd\u7559\u884c\u548c\u5217\u8fd9\u4e24\u4e2a\u7ef4\u5ea6\uff08",(0,n.kt)("inlineCode",{parentName:"p"},"keepdims=True"),"\uff09\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"X = tf.constant([[1, 2, 3], [4, 5, 6]])\ntf.reduce_sum(X, axis=0, keepdims=True), tf.reduce_sum(X, axis=1, keepdims=True)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"(<tf.Tensor: id=462401, shape=(1, 3), dtype=int32, numpy=array([[5, 7, 9]], dtype=int32)>,\n <tf.Tensor: id=462403, shape=(2, 1), dtype=int32, numpy=\n array([[ 6],\n        [15]], dtype=int32)>)\n")),(0,n.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9a\u4e49\u524d\u9762\u5c0f\u8282\u91cc\u4ecb\u7ecd\u7684softmax\u8fd0\u7b97\u4e86\u3002\u5728\u4e0b\u9762\u7684\u51fd\u6570\u4e2d\uff0c\u77e9\u9635",(0,n.kt)("inlineCode",{parentName:"p"},"logits"),"\u7684\u884c\u6570\u662f\u6837\u672c\u6570\uff0c\u5217\u6570\u662f\u8f93\u51fa\u4e2a\u6570\u3002\u4e3a\u4e86\u8868\u8fbe\u6837\u672c\u9884\u6d4b\u5404\u4e2a\u8f93\u51fa\u7684\u6982\u7387\uff0csoftmax\u8fd0\u7b97\u4f1a\u5148\u901a\u8fc7",(0,n.kt)("inlineCode",{parentName:"p"},"exp"),"\u51fd\u6570\u5bf9\u6bcf\u4e2a\u5143\u7d20\u505a\u6307\u6570\u8fd0\u7b97\uff0c\u518d\u5bf9",(0,n.kt)("inlineCode",{parentName:"p"},"exp"),"\u77e9\u9635\u540c\u884c\u5143\u7d20\u6c42\u548c\uff0c\u6700\u540e\u4ee4\u77e9\u9635\u6bcf\u884c\u5404\u5143\u7d20\u4e0e\u8be5\u884c\u5143\u7d20\u4e4b\u548c\u76f8\u9664\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u77e9\u9635\u6bcf\u884c\u5143\u7d20\u548c\u4e3a1\u4e14\u975e\u8d1f\u3002\u56e0\u6b64\uff0c\u8be5\u77e9\u9635\u6bcf\u884c\u90fd\u662f\u5408\u6cd5\u7684\u6982\u7387\u5206\u5e03\u3002softmax\u8fd0\u7b97\u7684\u8f93\u51fa\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u884c\u5143\u7d20\u4ee3\u8868\u4e86\u4e00\u4e2a\u6837\u672c\u5728\u5404\u4e2a\u8f93\u51fa\u7c7b\u522b\u4e0a\u7684\u9884\u6d4b\u6982\u7387\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"def softmax(logits, axis=-1):\n    return tf.exp(logits)/tf.reduce_sum(tf.exp(logits), axis, keepdims=True)\n")),(0,n.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u968f\u673a\u8f93\u5165\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u5143\u7d20\u53d8\u6210\u4e86\u975e\u8d1f\u6570\uff0c\u4e14\u6bcf\u4e00\u884c\u548c\u4e3a1\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"X = tf.random.normal(shape=(2, 5))\nX_prob = softmax(X)\nX_prob, tf.reduce_sum(X_prob, axis=1)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"(<tf.Tensor: id=462414, shape=(2, 5), dtype=float32, numpy=\n array([[0.07188913, 0.19016613, 0.21624805, 0.40005335, 0.12164329],\n        [0.20424965, 0.22559293, 0.13348413, 0.2243966 , 0.21227665]],\n       dtype=float32)>,\n <tf.Tensor: id=462416, shape=(2,), dtype=float32, numpy=array([1.        , 0.99999994], dtype=float32)>)\n")),(0,n.kt)("h3",c({},{id:"\u5b9a\u4e49\u6a21\u578b"}),"\u5b9a\u4e49\u6a21\u578b"),(0,n.kt)("p",null,"\u6709\u4e86softmax\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e0a\u8282\u63cf\u8ff0\u7684softmax\u56de\u5f52\u6a21\u578b\u4e86\u3002\u8fd9\u91cc\u901a\u8fc7",(0,n.kt)("inlineCode",{parentName:"p"},"reshpe"),"\u51fd\u6570\u5c06\u6bcf\u5f20\u539f\u59cb\u56fe\u50cf\u6539\u6210\u957f\u5ea6\u4e3a",(0,n.kt)("inlineCode",{parentName:"p"},"num_inputs"),"\u7684\u5411\u91cf\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"def net(X):\n    logits = tf.matmul(tf.reshape(X, shape=(-1, W.shape[0])), W) + b\n    return softmax(logits)\n")),(0,n.kt)("h3",c({},{id:"\u5b9a\u4e49\u635f\u5931\u51fd\u6570"}),"\u5b9a\u4e49\u635f\u5931\u51fd\u6570"),(0,n.kt)("p",null,"\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86softmax\u56de\u5f52\u4f7f\u7528\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u3002\u4e3a\u4e86\u5f97\u5230\u6807\u7b7e\u7684\u9884\u6d4b\u6982\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"boolean_mask"),"\u51fd\u6570\u548c",(0,n.kt)("inlineCode",{parentName:"p"},"one_hot"),"\u51fd\u6570\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf",(0,n.kt)("inlineCode",{parentName:"p"},"y_hat"),"\u662f2\u4e2a\u6837\u672c\u57283\u4e2a\u7c7b\u522b\u7684\u9884\u6d4b\u6982\u7387\uff0c\u53d8\u91cf",(0,n.kt)("inlineCode",{parentName:"p"},"y"),"\u662f\u8fd92\u4e2a\u6837\u672c\u7684\u6807\u7b7e\u7c7b\u522b\u3002\u901a\u8fc7\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"gather"),"\u51fd\u6570\uff0c\u6211\u4eec\u5f97\u5230\u4e862\u4e2a\u6837\u672c\u7684\u6807\u7b7e\u7684\u9884\u6d4b\u6982\u7387\u3002\u4e0e3.4\u8282\uff08softmax\u56de\u5f52\uff09\u6570\u5b66\u8868\u8ff0\u4e2d\u6807\u7b7e\u7c7b\u522b\u79bb\u6563\u503c\u4ece1\u5f00\u59cb\u9010\u4e00\u9012\u589e\u4e0d\u540c\uff0c\u5728\u4ee3\u7801\u4e2d\uff0c\u6807\u7b7e\u7c7b\u522b\u7684\u79bb\u6563\u503c\u662f\u4ece0\u5f00\u59cb\u9010\u4e00\u9012\u589e\u7684\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"y_hat = np.array([[0.1, 0.3, 0.6], [0.3, 0.2, 0.5]])\ny = np.array([0, 2], dtype='int32')\ntf.boolean_mask(y_hat, tf.one_hot(y, depth=3))\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"<tf.Tensor: id=462449, shape=(2,), dtype=float64, numpy=array([0.1, 0.5])>\n")),(0,n.kt)("p",null,"\u4e0b\u9762\u5b9e\u73b0\u4e863.4\u8282\uff08softmax\u56de\u5f52\uff09\u4e2d\u4ecb\u7ecd\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u3002\uff08\u6ce8\uff1a\u7531\u4e8e\u5728 Tensorflow \u6d89\u53ca\u8fd0\u7b97\u7c7b\u578b\u8f6c\u6362\u7684\u95ee\u9898\uff0c\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"cast"),"\u51fd\u6570\u5bf9\u5f20\u91cf\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\uff09"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"def cross_entropy(y_hat, y):\n    y = tf.cast(tf.reshape(y, shape=[-1, 1]),dtype=tf.int32)\n    y = tf.one_hot(y, depth=y_hat.shape[-1])\n    y = tf.cast(tf.reshape(y, shape=[-1, y_hat.shape[-1]]),dtype=tf.int32)\n    return -tf.math.log(tf.boolean_mask(y_hat, y)+1e-8)\n")),(0,n.kt)("h3",c({},{id:"\u8ba1\u7b97\u5206\u7c7b\u51c6\u786e\u7387"}),"\u8ba1\u7b97\u5206\u7c7b\u51c6\u786e\u7387"),(0,n.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u522b\u7684\u9884\u6d4b\u6982\u7387\u5206\u5e03",(0,n.kt)("inlineCode",{parentName:"p"},"y_hat"),"\uff0c\u6211\u4eec\u628a\u9884\u6d4b\u6982\u7387\u6700\u5927\u7684\u7c7b\u522b\u4f5c\u4e3a\u8f93\u51fa\u7c7b\u522b\u3002\u5982\u679c\u5b83\u4e0e\u771f\u5b9e\u7c7b\u522b",(0,n.kt)("inlineCode",{parentName:"p"},"y"),"\u4e00\u81f4\uff0c\u8bf4\u660e\u8fd9\u6b21\u9884\u6d4b\u662f\u6b63\u786e\u7684\u3002\u5206\u7c7b\u51c6\u786e\u7387\u5373\u6b63\u786e\u9884\u6d4b\u6570\u91cf\u4e0e\u603b\u9884\u6d4b\u6570\u91cf\u4e4b\u6bd4\u3002"),(0,n.kt)("p",null,"\u4e3a\u4e86\u6f14\u793a\u51c6\u786e\u7387\u7684\u8ba1\u7b97\uff0c\u4e0b\u9762\u5b9a\u4e49\u51c6\u786e\u7387",(0,n.kt)("inlineCode",{parentName:"p"},"accuracy"),"\u51fd\u6570\u3002\u5176\u4e2d",(0,n.kt)("inlineCode",{parentName:"p"},"tf.argmax(y_hat, axis=1)"),"\u8fd4\u56de\u77e9\u9635",(0,n.kt)("inlineCode",{parentName:"p"},"y_hat"),"\u6bcf\u884c\u4e2d\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u4e14\u8fd4\u56de\u7ed3\u679c\u4e0e\u53d8\u91cf",(0,n.kt)("inlineCode",{parentName:"p"},"y"),"\u5f62\u72b6\u76f8\u540c\u3002\u76f8\u7b49\u6761\u4ef6\u5224\u65ad\u5f0f",(0,n.kt)("inlineCode",{parentName:"p"},"(tf.argmax(y_hat, axis=1) == y)"),"\u662f\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e3a",(0,n.kt)("inlineCode",{parentName:"p"},"bool"),"\u7684",(0,n.kt)("inlineCode",{parentName:"p"},"Tensor"),"\uff0c\u5b9e\u9645\u53d6\u503c\u4e3a\uff1a0\uff08\u76f8\u7b49\u4e3a\u5047\uff09\u6216 1\uff08\u76f8\u7b49\u4e3a\u771f\uff09\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"def accuracy(y_hat, y):\n    return np.mean((tf.argmax(y_hat, axis=1) == y))\n")),(0,n.kt)("p",null,"\u8ba9\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u5728\u6f14\u793a",(0,n.kt)("inlineCode",{parentName:"p"},"boolean_mask"),"\u51fd\u6570\u65f6\u5b9a\u4e49\u7684\u53d8\u91cf",(0,n.kt)("inlineCode",{parentName:"p"},"y_hat"),"\u548c",(0,n.kt)("inlineCode",{parentName:"p"},"y"),"\uff0c\u5e76\u5c06\u5b83\u4eec\u5206\u522b\u4f5c\u4e3a\u9884\u6d4b\u6982\u7387\u5206\u5e03\u548c\u6807\u7b7e\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u4e2a\u6837\u672c\u9884\u6d4b\u7c7b\u522b\u4e3a2\uff08\u8be5\u884c\u6700\u5927\u5143\u7d200.6\u5728\u672c\u884c\u7684\u7d22\u5f15\u4e3a2\uff09\uff0c\u4e0e\u771f\u5b9e\u6807\u7b7e0\u4e0d\u4e00\u81f4\uff1b\u7b2c\u4e8c\u4e2a\u6837\u672c\u9884\u6d4b\u7c7b\u522b\u4e3a2\uff08\u8be5\u884c\u6700\u5927\u5143\u7d200.5\u5728\u672c\u884c\u7684\u7d22\u5f15\u4e3a2\uff09\uff0c\u4e0e\u771f\u5b9e\u6807\u7b7e2\u4e00\u81f4\u3002\u56e0\u6b64\uff0c\u8fd9\u4e24\u4e2a\u6837\u672c\u4e0a\u7684\u5206\u7c7b\u51c6\u786e\u7387\u4e3a0.5\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"accuracy(y_hat, y)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"0.5\n")),(0,n.kt)("p",null,"\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc4\u4ef7\u6a21\u578b",(0,n.kt)("inlineCode",{parentName:"p"},"net"),"\u5728\u6570\u636e\u96c6",(0,n.kt)("inlineCode",{parentName:"p"},"data_iter"),"\u4e0a\u7684\u51c6\u786e\u7387\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"# \u63cf\u8ff0,\u5bf9\u4e8etensorflow2\u4e2d\uff0c\u6bd4\u8f83\u7684\u53cc\u65b9\u5fc5\u987b\u7c7b\u578b\u90fd\u662fint\u578b\uff0c\u6240\u4ee5\u8981\u5c06\u8f93\u51fa\u548c\u6807\u7b7e\u90fd\u8f6c\u4e3aint\u578b\ndef evaluate_accuracy(data_iter, net):\n    acc_sum, n = 0.0, 0\n    for _, (X, y) in enumerate(data_iter):\n        y = tf.cast(y,dtype=tf.int64)\n        acc_sum += np.sum(tf.cast(tf.argmax(net(X), axis=1), dtype=tf.int64) == y)\n        n += y.shape[0]\n    return acc_sum / n\n")),(0,n.kt)("p",null,"\u56e0\u4e3a\u6211\u4eec\u968f\u673a\u521d\u59cb\u5316\u4e86\u6a21\u578b",(0,n.kt)("inlineCode",{parentName:"p"},"net"),"\uff0c\u6240\u4ee5\u8fd9\u4e2a\u968f\u673a\u6a21\u578b\u7684\u51c6\u786e\u7387\u5e94\u8be5\u63a5\u8fd1\u4e8e\u7c7b\u522b\u4e2a\u6570 10 \u7684\u5012\u6570\u5373 0.1\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"print(evaluate_accuracy(test_iter, net))\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"0.0834\n")),(0,n.kt)("h3",c({},{id:"\u8bad\u7ec3\u6a21\u578b"}),"\u8bad\u7ec3\u6a21\u578b"),(0,n.kt)("p",null,"\u8bad\u7ec3softmax\u56de\u5f52\u7684\u5b9e\u73b0\u8ddf 3.2\uff08\u7ebf\u6027\u56de\u5f52\u7684\u4ece\u96f6\u5f00\u59cb\u5b9e\u73b0\uff09\u4e00\u8282\u4ecb\u7ecd\u7684\u7ebf\u6027\u56de\u5f52\u4e2d\u7684\u5b9e\u73b0\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u540c\u6837\u4f7f\u7528\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6765\u4f18\u5316\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570\u3002\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u8fed\u4ee3\u5468\u671f\u6570",(0,n.kt)("inlineCode",{parentName:"p"},"num_epochs"),"\u548c\u5b66\u4e60\u7387",(0,n.kt)("inlineCode",{parentName:"p"},"lr"),"\u90fd\u662f\u53ef\u4ee5\u8c03\u7684\u8d85\u53c2\u6570\u3002\u6539\u53d8\u5b83\u4eec\u7684\u503c\u53ef\u80fd\u4f1a\u5f97\u5230\u5206\u7c7b\u66f4\u51c6\u786e\u7684\u6a21\u578b\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"num_epochs, lr = 5, 0.1\n# \u672c\u51fd\u6570\u5df2\u4fdd\u5b58\u5728d2lzh\u5305\u4e2d\u65b9\u4fbf\u4ee5\u540e\u4f7f\u7528\ndef train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, params=None, lr=None, trainer=None):\n    for epoch in range(num_epochs):\n        train_l_sum, train_acc_sum, n = 0.0, 0.0, 0\n        for X, y in train_iter:\n            with tf.GradientTape() as tape:\n                y_hat = net(X)\n                l = tf.reduce_sum(loss(y_hat, y))\n            grads = tape.gradient(l, params)\n            if trainer is None:\n                # \u5982\u679c\u6ca1\u6709\u4f20\u5165\u4f18\u5316\u5668\uff0c\u5219\u4f7f\u7528\u539f\u5148\u7f16\u5199\u7684\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\n                for i, param in enumerate(params):\n                    param.assign_sub(lr * grads[i] / batch_size)\n            else:\n                # tf.keras.optimizers.SGD \u76f4\u63a5\u4f7f\u7528\u662f\u968f\u673a\u68af\u5ea6\u4e0b\u964d theta(t+1) = theta(t) - learning_rate * gradient\n                # \u8fd9\u91cc\u4f7f\u7528\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\uff0c\u9700\u8981\u5bf9\u68af\u5ea6\u9664\u4ee5 batch_size, \u5bf9\u5e94\u539f\u4e66\u4ee3\u7801\u7684 trainer.step(batch_size)\n                trainer.apply_gradients(zip([grad / batch_size for grad in grads], params))  \n                \n            y = tf.cast(y, dtype=tf.float32)\n            train_l_sum += l.numpy()\n            train_acc_sum += tf.reduce_sum(tf.cast(tf.argmax(y_hat, axis=1) == tf.cast(y, dtype=tf.int64), dtype=tf.int64)).numpy()\n            n += y.shape[0]\n        test_acc = evaluate_accuracy(test_iter, net)\n        print('epoch %d, loss %.4f, train acc %.3f, test acc %.3f'% (epoch + 1, train_l_sum / n, train_acc_sum / n, test_acc))\n\ntrainer = tf.keras.optimizers.SGD(lr)\ntrain_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, batch_size, [W, b], lr)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"epoch 1, loss 0.8969, train acc 0.736, test acc 0.813\nepoch 2, loss 0.5987, train acc 0.806, test acc 0.826\nepoch 3, loss 0.5524, train acc 0.820, test acc 0.832\nepoch 4, loss 0.5297, train acc 0.826, test acc 0.834\nepoch 5, loss 0.5139, train acc 0.830, test acc 0.836\n")),(0,n.kt)("h3",c({},{id:"\u9884\u6d4b"}),"\u9884\u6d4b"),(0,n.kt)("p",null,"\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u6f14\u793a\u5982\u4f55\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u4e86\u3002\u7ed9\u5b9a\u4e00\u7cfb\u5217\u56fe\u50cf\uff08\u7b2c\u4e09\u884c\u56fe\u50cf\u8f93\u51fa\uff09\uff0c\u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u5b83\u4eec\u7684\u771f\u5b9e\u6807\u7b7e\uff08\u7b2c\u4e00\u884c\u6587\u672c\u8f93\u51fa\uff09\u548c\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\uff08\u7b2c\u4e8c\u884c\u6587\u672c\u8f93\u51fa\uff09\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"import matplotlib.pyplot as plt\nX, y = iter(test_iter).next()\n\ndef get_fashion_mnist_labels(labels):\n    text_labels = ['t-shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot']\n    return [text_labels[int(i)] for i in labels]\n\ndef show_fashion_mnist(images, labels):\n    # \u8fd9\u2fa5\u7684_\u8868\u793a\u6211\u4eec\u5ffd\u7565\uff08\u4e0d\u4f7f\u2f64\uff09\u7684\u53d8\u91cf\n    _, figs = plt.subplots(1, len(images), figsize=(12, 12)) # \u8fd9\u91cc\u6ce8\u610fsubplot \u548csubplots \u7684\u533a\u522b\n    for f, img, lbl in zip(figs, images, labels):\n        f.imshow(tf.reshape(img, shape=(28, 28)).numpy())\n        f.set_title(lbl)\n        f.axes.get_xaxis().set_visible(False)\n        f.axes.get_yaxis().set_visible(False)\n    plt.show()\n\ntrue_labels = get_fashion_mnist_labels(y.numpy())\npred_labels = get_fashion_mnist_labels(tf.argmax(net(X), axis=1).numpy())\ntitles = [true + '\\n' + pred for true, pred in zip(true_labels, pred_labels)]\n\nshow_fashion_mnist(X[0:9], titles[0:9])\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"img",src:t(40216).Z,width:"1126",height:"192"})),(0,n.kt)("h2",c({},{id:"\u4f7f\u7528\u6846\u67b6\u5b9e\u73b0"}),"\u4f7f\u7528\u6846\u67b6\u5b9e\u73b0"),(0,n.kt)("h3",c({},{id:"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e-1"}),"\u83b7\u53d6\u548c\u8bfb\u53d6\u6570\u636e"),(0,n.kt)("p",null,"\u6211\u4eec\u4ecd\u7136\u4f7f\u7528Fashion-MNIST\u6570\u636e\u96c6\u548c\u4e0a\u4e00\u8282\u4e2d\u8bbe\u7f6e\u7684\u6279\u91cf\u5927\u5c0f\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"fashion_mnist = keras.datasets.fashion_mnist\n(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\n")),(0,n.kt)("p",null,"\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u5f52\u4e00\u5316\uff0c\u4fbf\u4e8e\u8bad\u7ec3"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"x_train = x_train / 255.0\nx_test = x_test / 255.0\n")),(0,n.kt)("h3",c({},{id:"\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u6a21\u578b"}),"\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u6a21\u578b"),(0,n.kt)("p",null,"\u57283.4\u8282\uff08softmax\u56de\u5f52\uff09\u4e2d\u63d0\u5230\uff0csoftmax\u56de\u5f52\u7684\u8f93\u51fa\u5c42\u662f\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u8f93\u51fa\u4e2a\u6570\u4e3a10\u7684\u5168\u8fde\u63a5\u5c42\u3002 \u7b2c\u4e00\u5c42\u662fFlatten\uff0c\u5c0628 * 28\u7684\u50cf\u7d20\u503c\uff0c\u538b\u7f29\u6210\u4e00\u884c (784, ) \u7b2c\u4e8c\u5c42\u8fd8\u662fDense\uff0c\u56e0\u4e3a\u662f\u591a\u5206\u7c7b\u95ee\u9898\uff0c\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528softmax"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n")),(0,n.kt)("h3",c({},{id:"softmax\u548c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570"}),"softmax\u548c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570"),(0,n.kt)("p",null,"\u5982\u679c\u505a\u4e86\u4e0a\u4e00\u8282\u7684\u7ec3\u4e60\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u610f\u8bc6\u5230\u4e86\u5206\u5f00\u5b9a\u4e49softmax\u8fd0\u7b97\u548c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u503c\u4e0d\u7a33\u5b9a\u3002\u56e0\u6b64\uff0cTensorflow2.0\u7684keras API\u63d0\u4f9b\u4e86\u4e00\u4e2aloss\u53c2\u6570\u3002\u5b83\u7684\u6570\u503c\u7a33\u5b9a\u6027\u66f4\u597d\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"loss = 'sparse_categorical_crossentropy'\n")),(0,n.kt)("h3",c({},{id:"\u5b9a\u4e49\u4f18\u5316\u7b97\u6cd5"}),"\u5b9a\u4e49\u4f18\u5316\u7b97\u6cd5"),(0,n.kt)("p",null,"\u6211\u4eec\u4f7f\u7528\u5b66\u4e60\u7387\u4e3a0.1\u7684\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u4f5c\u4e3a\u4f18\u5316\u7b97\u6cd5\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"optimizer = tf.keras.optimizers.SGD(0.1)\n")),(0,n.kt)("h3",c({},{id:"\u8bad\u7ec3\u6a21\u578b-1"}),"\u8bad\u7ec3\u6a21\u578b"),(0,n.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u4e00\u8282\u4e2d\u5b9a\u4e49\u7684\u8bad\u7ec3\u51fd\u6570\u6765\u8bad\u7ec3\u6a21\u578b\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"model.compile(optimizer=tf.keras.optimizers.SGD(0.1),\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train,y_train,epochs=5,batch_size=256)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"Train on 60000 samples\nEpoch 1/5\n60000/60000 [==============================] - 1s 20us/sample - loss: 0.7941 - accuracy: 0.7408\nEpoch 2/5\n60000/60000 [==============================] - 1s 11us/sample - loss: 0.5729 - accuracy: 0.8112\nEpoch 3/5\n60000/60000 [==============================] - 1s 11us/sample - loss: 0.5281 - accuracy: 0.8241\nEpoch 4/5\n60000/60000 [==============================] - 1s 11us/sample - loss: 0.5038 - accuracy: 0.8296\nEpoch 5/5\n60000/60000 [==============================] - 1s 11us/sample - loss: 0.4866 - accuracy: 0.8351\n")),(0,n.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6bd4\u8f83\u6a21\u578b\u5728\u6d4b\u8bd5\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u60c5\u51b5"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-python"}),"test_loss, test_acc = model.evaluate(x_test, y_test)\nprint('Test Acc:',test_acc)\n")),(0,n.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{})," - 1s 55us/sample - loss: 0.4347 - accuracy: 0.8186\nTest Acc: 0.8186\n")),(0,n.kt)("h2",c({},{id:"\u5c0f\u7ed3"}),"\u5c0f\u7ed3"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u4f7f\u7528softmax\u56de\u5f52\u505a\u591a\u7c7b\u522b\u5206\u7c7b\u3002\u4e0e\u8bad\u7ec3\u7ebf\u6027\u56de\u5f52\u76f8\u6bd4\uff0c\u4f60\u4f1a\u53d1\u73b0\u8bad\u7ec3softmax\u56de\u5f52\u7684\u6b65\u9aa4\u548c\u5b83\u975e\u5e38\u76f8\u4f3c\uff1a\u83b7\u53d6\u5e76\u8bfb\u53d6\u6570\u636e\u3001\u5b9a\u4e49\u6a21\u578b\u548c\u635f\u5931\u51fd\u6570\u5e76\u4f7f\u7528\u4f18\u5316\u7b97\u6cd5\u8bad\u7ec3\u6a21\u578b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u8bad\u7ec3\u90fd\u6709\u7740\u7c7b\u4f3c\u7684\u6b65\u9aa4\u3002")))}x.isMDXComponent=!0},40216:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/3.6_output1-68c7de95c221d16c05b09710bbf7cd94.png"}}]);