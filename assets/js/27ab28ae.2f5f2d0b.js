"use strict";(self.webpackChunkml_notebook=self.webpackChunkml_notebook||[]).push([[7085],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,d=u["".concat(s,".").concat(y)]||u[y]||f[y]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},90246:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>v,contentTitle:()=>m,default:()=>h,frontMatter:()=>d,metadata:()=>b,toc:()=>g});var n=r(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&p(e,r,t[r]);if(l)for(var r of l(t))c.call(t,r)&&p(e,r,t[r]);return e},f=(e,t)=>o(e,i(t)),y=(e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r};const d={sidebar_position:5},m="AlexNet\u4ee3\u7801\u5b9e\u73b0",b={unversionedId:"ch2p2/[5]AlexNet-code",id:"ch2p2/[5]AlexNet-code",title:"AlexNet\u4ee3\u7801\u5b9e\u73b0",description:"\u8fd9\u91cc\u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u8bb2\u89e3\u7684\u5185\u5bb9\uff0c\u8bb2\u89e3\u7684\u5185\u5bb9\u8bf7\u53c2\u8003AlexNet\uff1a\u66f4\u6df1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edcAlexNet)\u3002",source:"@site/docs/ch2p2/[5]AlexNet-code.mdx",sourceDirName:"ch2p2",slug:"/ch2p2/[5]AlexNet-code",permalink:"/ch2p2/[5]AlexNet-code",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"AlexNet\uff1a\u66f4\u6df1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc",permalink:"/ch2p2/[4]AlexNet"},next:{title:"\u6807\u51c6\u5316\u5c42\u548c\u6fc0\u6d3b\u5c42\u7684\u987a\u5e8f\u95ee\u9898",permalink:"/ch2p2/[6]the-sequence-order-between-bn-and-activations"}},v={},g=[],x={toc:g},O="wrapper";function h(e){var t=e,{components:r}=t,a=y(t,["components"]);return(0,n.kt)(O,f(u(u({},x),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"alexnet\u4ee3\u7801\u5b9e\u73b0"}),"AlexNet\u4ee3\u7801\u5b9e\u73b0"),(0,n.kt)("p",null,"\u8fd9\u91cc\u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u8bb2\u89e3\u7684\u5185\u5bb9\uff0c\u8bb2\u89e3\u7684\u5185\u5bb9\u8bf7\u53c2\u8003",(0,n.kt)("a",u({parentName:"p"},{href:"./%5B4%5DAlexNet"}),"AlexNet\uff1a\u66f4\u6df1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc"),"\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-python"}),"\u5206\u7c7bimport tensorflow as tf\nfrom tensorflow.keras import layers, datasets, Sequential\n\n(training_x, training_y), (testing_x, testing_y) = datasets.cifar10.load_data()\ntraining_x = (training_x.astype('float32') / 255.)\ntesting_x = (testing_x.astype('float32') / 255.)\n\nmodel = Sequential([\n    # \u7b2c\u4e00\u5c42\u5377\u79ef\n    layers.Conv2D(filters=96, kernel_size=(3, 3)),\n    # \u7b2c\u4e00\u5c42\u5377\u79ef\u5177\u6709BN\u5c42\n    layers.BatchNormalization(),\n    layers.Activation('relu'),\n    layers.MaxPool2D(pool_size=(3, 3), strides=2),\n    # \u7b2c\u4e8c\u5c42\u5377\u79ef\n    layers.Conv2D(filters=256, kernel_size=(3, 3)),\n    # \u7b2c\u4e8c\u5c42\u5377\u79ef\u5177\u6709BN\u5c42\n    layers.BatchNormalization(),\n    layers.Activation('relu'),\n    layers.MaxPool2D(pool_size=(3, 3), strides=2),\n    # \u7b2c\u4e09\u5c42\u5377\u79ef\uff0c\u5e76\u6ca1\u6709BN\u5c42\uff0c\u4e5f\u6ca1\u6709\u6c60\u5316\n    layers.Conv2D(filters=384, kernel_size=(3, 3), padding='same',\n                  activation='relu'),\n    # \u7b2c\u56db\u5c42\u5377\u79ef\uff0c\u5e76\u6ca1\u6709BN\u5c42\uff0c\u4e5f\u6ca1\u6709\u6c60\u5316\n    layers.Conv2D(filters=384, kernel_size=(3, 3), padding='same',\n                  activation='relu'),\n    # \u7b2c\u4e94\u5c42\u5377\u79ef\uff0c\u5e76\u6ca1\u6709BN\u5c42\n    layers.Conv2D(filters=256, kernel_size=(3, 3), padding='same',\n                  activation='relu'),\n    layers.MaxPool2D(pool_size=(3, 3), strides=2),\n    # \u6253\u5e73\u8fdb\u5165\u5168\u8fde\u63a5\u8fdb\u884c\u5206\u7c7b\n    layers.Flatten(),\n    layers.Dense(2048, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(2048, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['sparse_categorical_accuracy'])\n\nmodel.fit(training_x, training_y, batch_size=32, epochs=20, validation_data=(testing_x, testing_y))\n")))}h.isMDXComponent=!0}}]);