"use strict";(self.webpackChunkml_notebook=self.webpackChunkml_notebook||[]).push([[2107],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>d});var t=a(67294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=t.createContext({}),m=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=m(e.components);return t.createElement(i.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},N=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(a),N=s,d=c["".concat(i,".").concat(N)]||c[N]||u[N]||r;return a?t.createElement(d,l(l({ref:n},p),{},{components:a})):t.createElement(d,l({ref:n},p))}));function d(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=N;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[c]="string"==typeof e?e:s,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}N.displayName="MDXCreateElement"},31577:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>k,default:()=>y,frontMatter:()=>d,metadata:()=>h,toc:()=>_});var t=a(3905),s=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,p=(e,n,a)=>n in e?s(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,c=(e,n)=>{for(var a in n||(n={}))i.call(n,a)&&p(e,a,n[a]);if(o)for(var a of o(n))m.call(n,a)&&p(e,a,n[a]);return e},u=(e,n)=>r(e,l(n)),N=(e,n)=>{var a={};for(var t in e)i.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&m.call(e,t)&&(a[t]=e[t]);return a};const d={title:"Fast-SCNN - Fast Semantic Segmentation Network",authors:["zerorains"],tags:["segmentation","backbone"]},k=void 0,h={permalink:"/blog/[13]Fast-SCNN-Fast-Semantic-Segmentation-Network",editUrl:"https://github.dev/neet-cv/ml.akasaki.space/blob/master/blog/[13]Fast-SCNN-Fast-Semantic-Segmentation-Network.md",source:"@site/blog/[13]Fast-SCNN-Fast-Semantic-Segmentation-Network.md",title:"Fast-SCNN - Fast Semantic Segmentation Network",description:"\u8fd9\u662f\u4e00\u7bc7\u8bb2\u89e3\u4e00\u79cd\u5feb\u901f\u8bed\u4e49\u5206\u5272\u7684\u8bba\u6587\u3002\u8bba\u6587\u540d Fast Semantic Segmentation Network",date:"2023-12-31T09:31:53.000Z",formattedDate:"2023\u5e7412\u670831\u65e5",tags:[{label:"segmentation",permalink:"/blog/tags/segmentation"},{label:"backbone",permalink:"/blog/tags/backbone"}],readingTime:14.145,hasTruncateMarker:!0,authors:[{name:"Zerorains",title:"life is but a span, I use python",url:"https://github.com/zeroRains",email:"me@zerorains.top",imageURL:"https://github.com/zeroRains.png",key:"zerorains"}],frontMatter:{title:"Fast-SCNN - Fast Semantic Segmentation Network",authors:["zerorains"],tags:["segmentation","backbone"]},prevItem:{title:"MobileNetV2 - Inverted Residuals and Linear Bottlenecks",permalink:"/blog/[12]MobileNetV2-Inverted-Residuals-and-Linear-bottleneck"},nextItem:{title:"MobileNets - Efficient Convolutional Neural Networks for Mobile Vision Applications",permalink:"/blog/[14]MobileNets-Efficient-Convolutional-Neural-Networks-for-Mobile-Vision-Applications"}},f={authorsImageUrls:[void 0]},_=[{value:"\u6458\u8981",id:"\u6458\u8981",level:2},{value:"DCNNs\u7684\u6548\u7387",id:"dcnns\u7684\u6548\u7387",level:2},{value:"\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef(Depthwise Separable Convolutions):",id:"\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79efdepthwise-separable-convolutions",level:3},{value:"DCNNs\u7684\u9ad8\u6548\u91cd\u65b0\u8bbe\u8ba1",id:"dcnns\u7684\u9ad8\u6548\u91cd\u65b0\u8bbe\u8ba1",level:3},{value:"\u7f51\u7edc\u538b\u7f29",id:"\u7f51\u7edc\u538b\u7f29",level:3},{value:"Fast-SCNN",id:"fast-scnn",level:2},{value:"\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757(learning to down-sample)",id:"\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757learning-to-down-sample",level:3},{value:"\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668(Global Feature Extrator)",id:"\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668global-feature-extrator",level:3},{value:"\u7279\u5f81\u878d\u5408\u6a21\u5757(Feature Fusion Module)",id:"\u7279\u5f81\u878d\u5408\u6a21\u5757feature-fusion-module",level:3},{value:"\u5206\u7c7b\u6a21\u5757(classifier)",id:"\u5206\u7c7b\u6a21\u5757classifier",level:3}],g={toc:_},b="wrapper";function y(e){var n=e,{components:s}=n,r=N(n,["components"]);return(0,t.kt)(b,u(c(c({},g),r),{components:s,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"\u8fd9\u662f\u4e00\u7bc7\u8bb2\u89e3\u4e00\u79cd\u5feb\u901f\u8bed\u4e49\u5206\u5272\u7684\u8bba\u6587\u3002\u8bba\u6587\u540d:",(0,t.kt)("a",c({parentName:"p"},{href:"https://arxiv.org/abs/1902.04502"}),"Fast-SCNN: Fast Semantic Segmentation Network")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u4e3b\u8981\u662f\u91c7\u7528\u53cc\u6d41\u6a21\u578b\u7684\u67b6\u6784\u8bbe\u8ba1\u8fd9\u4e2a\u7f51\u7edc"),(0,t.kt)("li",{parentName:"ul"},"\u672c\u6587\u603b\u601d\u8def\uff1a\u51cf\u5c11\u5197\u4f59\u7684\u5377\u79ef\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u9ad8\u901f\u5ea6")),(0,t.kt)("p",null,"\u6458\u8981\uff1a"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"The encoder-decoder framework is state-of-the-art for offline semantic image segmentation. Since the rise in autonomous systems, real-time computation is increasingly desirable. In this paper, we introduce fast segmentation convolutional neural network (Fast-SCNN), an above real-time semantic segmentation model on high resolution image data (1024 \xd7 2048px) suited to efficient computation on embedded devices with low memory. Building on existing two-branch methods for fast segmentation, we introduce our \u2018learning to downsample\u2019 module which computes low-level features for multiple resolution branches simultaneously. Our network combines spatial detail at high resolution with deep features extracted at lower resolution, yielding an accuracy of 68.0% mean intersection over union at 123.5 frames per second on Cityscapes. We also show that large scale pre-training is unnecessary. We thoroughly validate our metric in experiments with ImageNet pre-training and the coarse labeled data of Cityscapes. Finally, we show even faster computation with competitive results on subsampled inputs, without any network modifications.")),(0,t.kt)("h2",c({},{id:"\u6458\u8981"}),"\u6458\u8981"),(0,t.kt)("p",null,"\u4e3b\u8981\u8d21\u732e\uff1a"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"\u63d0\u51fa\u4e86\u4e00\u4e2a\u6709\u7ade\u4e89\u6027(68.0%miou)\uff0c\u5e76\u4e14\u80fd\u5728\u9ad8\u5206\u8fa8\u7387(1024x2048)\u7684\u56fe\u7247\u5b9e\u73b0\u5b9e\u65f6(123.5FPS)\u8bed\u4e49\u5206\u5272\u7684\u7b97\u6cd5Fast-SCNN."),(0,t.kt)("li",{parentName:"ol"},"\u91c7\u7528\u4e86\u79bb\u7ebf\u578bDCNNs\u4e2d\u6d41\u884c\u7684",(0,t.kt)("strong",{parentName:"li"},"\u8df3\u8dc3\u8fde\u63a5(skip connection)"),"\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u79cd\u6d45\u5c42\u5b66\u4e60\u7684\u4e0b\u91c7\u6837\u6a21\u5757",(0,t.kt)("strong",{parentName:"li"},"learning to Down-sample"),",\u4ee5\u6b64\u66f4\u52a0\u5feb\u901f\u9ad8\u6548\u5730\u8fdb\u884c\u591a\u5206\u652f\u4f4e\u7ea7\u7279\u5f81\u63d0\u53d6\u3002"),(0,t.kt)("li",{parentName:"ol"},"\u5c06Fast-SCNN\u8bbe\u8ba1\u4e3a\u8f7b\u91cf\u578b(low capacity)\uff0c\u5e76\u8bc1\u5b9e\u4e86\u65e0\u8bba\u662f\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u7684\u8bad\u7ec3\u6a21\u578b\u591a\u8bad\u7ec3\u51e0\u4ee3\uff0c\u8fd8\u662f\u5728\u6dfb\u52a0\u7684\u7c97\u7cd9\u6570\u636e\u4e2d\u591a\u8bad\u7ec3\u51e0\u4ee3\u7684\u7ed3\u679c\u662f\u7b49\u6548\u7684\u3002")),(0,t.kt)("h2",c({},{id:"dcnns\u7684\u6548\u7387"}),"DCNNs\u7684\u6548\u7387"),(0,t.kt)("p",null,"\u9ad8\u6548DCNNs\uff08Diffusion-Convolutional Neural Networks \uff09\u7684\u5e38\u89c1\u6280\u672f\u4e3a\uff1a"),(0,t.kt)("h3",c({},{id:"\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79efdepthwise-separable-convolutions"}),"\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef(Depthwise Separable Convolutions):"),(0,t.kt)("p",null,"MoblieNet\u5c06\u6807\u51c6\u7684Conv\u5206\u89e3\u4e3a",(0,t.kt)("strong",{parentName:"p"},"\u6df1\u5ea6\u5377\u79ef\uff08depthwise convolutions\uff09"),"\u548c",(0,t.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,t.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,t.kt)("semantics",{parentName:"math"},(0,t.kt)("mrow",{parentName:"semantics"},(0,t.kt)("mn",{parentName:"mrow"},"1"),(0,t.kt)("mo",{parentName:"mrow"},"\xd7"),(0,t.kt)("mn",{parentName:"mrow"},"1")),(0,t.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"1 \\times 1")))),(0,t.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"))))),(0,t.kt)("strong",{parentName:"p"},"\u70b9\u5f0f\u5377\u79ef(pointwise convolution)"),"\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\uff0c\u51cf\u5c11\u4e86\u6d6e\u70b9\u8fd0\u7b97\u548c\u5377\u79ef\u53c2\u6570\uff0c\u51cf\u5c11\u4e86\u6a21\u578b\u7684\u8ba1\u7b97\u6210\u672c\u548c\u5185\u5b58\u9700\u6c42\u3002"),(0,t.kt)("h3",c({},{id:"dcnns\u7684\u9ad8\u6548\u91cd\u65b0\u8bbe\u8ba1"}),"DCNNs\u7684\u9ad8\u6548\u91cd\u65b0\u8bbe\u8ba1"),(0,t.kt)("p",null,"MobileNet-V2\u4f7f\u7528",(0,t.kt)("strong",{parentName:"p"},"\u5012\u7f6e\u7684\u74f6\u9888\u6b8b\u5dee\u5757(inverted bottleneck residual blocks)"),"\u4ee5\u5206\u7c7b\u4efb\u52a1\u6784\u5efa\u6709\u6548\u7684DCNN\u3002"),(0,t.kt)("p",null,"ContextNeto\u4f7f\u7528\u80fd\u591f\u5012\u7f6e\u74f6\u9888\u6b8b\u5dee\u5757\u8bbe\u8ba1\u4e86\u4e00\u4e2a1\u4e24\u5206\u652f\u7f51\u7edc\uff0c\u4ee5\u8fdb\u884c\u6709\u6548\u7684\u5b9e\u65f6\u8bed\u4e49\u5206\u5272\u3002"),(0,t.kt)("h3",c({},{id:"\u7f51\u7edc\u538b\u7f29"}),"\u7f51\u7edc\u538b\u7f29"),(0,t.kt)("p",null,"\u4f7f\u7528\u526a\u679d\u51cf\u5c0f\u9884\u8bad\u7ec3\u7f51\u7edc\u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u5757\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u66f4\u5c0f\u7684\u53c2\u6570\u96c6\u548c\u66f4\u5c0f\u7684\u5185\u5b58\u5360\u7528\u7a7a\u95f4\u3002"),(0,t.kt)("p",null,"Fast-SCNN\u4e25\u91cd\u4f9d\u8d56\u4e0e\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u548c\u6b8b\u5dee\u74f6\u9888\u5757\uff0c\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a\u4e24\u5206\u652f\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u5c06\u5b66\u4e60\u5185\u5bb9\u6574\u5408\u5230\u4e0b\u91c7\u6837\u7684\u6a21\u5757\u4e2d\uff0c\u4ece\u800c\u5141\u8bb8\u5728\u591a\u4e2a\u5206\u8fa8\u7387\u7ea7\u522b\u4e0a\u8fdb\u884c\u5171\u4eab\u7279\u5f81\u63d0\u53d6\u3002\u7f51\u7edc\u91cf\u5316\u548c\u7f51\u7edc\u538b\u7f29\u53ef\u4ee5\u6b63\u4ea4\u5e94\u7528\uff0c\u7559\u5f85\u540e\u9762\u7684\u5de5\u4f5c\u3002"),(0,t.kt)("h2",c({},{id:"fast-scnn"}),"Fast-SCNN"),(0,t.kt)("p",null,"\u7f51\u7edc\u7ed3\u6784\u56fe\uff1a"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image-20210512115431363",src:a(46787).Z,width:"1205",height:"427"})),(0,t.kt)("p",null,"\u5728\u5b9a\u4e49\u7f51\u7edc\u7684BN\u5c42\u65f6\u4f7f\u7528\u7c7b\u5404\u79cd\u7c7b\u578b\u7684BN\u5c42,\u4f46\u662f\u9ed8\u8ba4\u90fd\u662f\u4f7f\u7528\u666e\u901a\u7684BN\u5c42"),(0,t.kt)("p",null,"\u5e38\u89c4\u7684BN\uff0cSyncBN\uff08\u8de8\u5361BN\uff09\uff0cFrozenBN\uff08\u6d4b\u8bd5\u9636\u6bb5\u4f7f\u7528\u7684BN\uff09\uff0cGN\uff08Group Normalization\uff09"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image-20210516102346560",src:a(85705).Z,width:"713",height:"217"})),(0,t.kt)("h3",c({},{id:"\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757learning-to-down-sample"}),"\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757(learning to down-sample)"),(0,t.kt)("p",null,"\u5728\u8be5\u6a21\u5757\u4e2d\u4f7f\u7528\u4e86\u4e09\u5c42\u5377\u79ef\uff0c\u7b2c\u4e00\u5c42\u662f\u666e\u901a\u7684\u5377\u79ef(Conv2D)\uff0c\u5176\u4f59\u4e24\u5c42\u662f\u53ef\u5206\u79bb\u5377\u79ef(DSConv)\uff0c\u56e0\u4e3a\u56fe\u50cf\u521a\u521a\u8f93\u5165\u53ea\u6709\u4e09\u4e2a\u901a\u9053\uff0c\u4f7f\u7528DSConv\u7684\u4f18\u52bf\u5e76\u4e0d\u660e\u663e\u6240\u4ee5\uff0c\u91c7\u7528\u666e\u901a\u5377\u79ef\u5c42\u3002"),(0,t.kt)("p",null,"\u5728\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757\u4e2d\uff0c\u4f7f\u7528\u7684\u6b65\u957f\u5747\u4e3a2\uff0c\u7136\u540e\u8fdb\u884cBN\u548cReLU\u3002\u5377\u79ef\u6838\u548c\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u6838\u5747\u4e3a",(0,t.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,t.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,t.kt)("semantics",{parentName:"math"},(0,t.kt)("mrow",{parentName:"semantics"},(0,t.kt)("mn",{parentName:"mrow"},"3"),(0,t.kt)("mo",{parentName:"mrow"},"\xd7"),(0,t.kt)("mn",{parentName:"mrow"},"3")),(0,t.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"3\\times3")))),(0,t.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"3"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"3"))))),"."),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),'# \u5728\u4e3b\u7f51\u7edc\u4e2d\u7684\u5b9a\u4e49\nself.learning_to_downsample = LearningToDownsample(32, 48, 64, norm_layer=self.norm_layer) # norm_layerh\u662f\u666e\u901a\u7684BN\n\n# \u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757\u7684\u5b9a\u4e49\nclass LearningToDownsample(nn.Module):\n    """Learning to downsample module"""\n\n    def __init__(self, dw_channels1=32, dw_channels2=48, out_channels=64, norm_layer=nn.BatchNorm2d):\n        super(LearningToDownsample, self).__init__()\n        self.conv = _ConvBNReLU(3, dw_channels1, 3, 2) # \u8fd9\u4e2a\u5c31\u662f\u5355\u7eaf\u7684CONV+BN+ReLU\n        # \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff1a\u4e00\u4e2a\u6df1\u5ea6\u5377\u79ef\uff0c\u4e00\u4e2a\u70b9\u5377\u79ef\u7684\u7ec4\u5408\n        self.dsconv1 = SeparableConv2d(dw_channels1, dw_channels2, stride=2, relu_first=False, norm_layer=norm_layer)\n        self.dsconv2 = SeparableConv2d(dw_channels2, out_channels, stride=2, relu_first=False, norm_layer=norm_layer)\n\n    def forward(self, x):\n        x = self.conv(x) #  \u666e\u901a\u5377\u79ef\n        x = self.dsconv1(x) # \u53ef\u5206\u79bb\u5377\u79ef\n        x = self.dsconv2(x)\n        return x\n')),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),"# \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\nclass SeparableConv2d(nn.Module):\n    def __init__(self, inplanes, planes, kernel_size=3, stride=1, dilation=1, relu_first=True,\n                 bias=False, norm_layer=nn.BatchNorm2d):\n        super().__init__()\n        # \u6df1\u5ea6\u5377\u79ef\uff0c\u5377\u79ef\u6838\u4e3a3\u6b65\u957f1\uff0cpadding1\uff0c\u7a7a\u6d1e1\u7684\u5377\u79ef\u5c42\n        depthwise = nn.Conv2d(inplanes, inplanes, kernel_size,\n                              stride=stride, padding=dilation,\n                              dilation=dilation, groups=inplanes, bias=bias)\n        # \u5bf9\u5e94\u7684BN\n        bn_depth = norm_layer(inplanes)\n        # \u70b9\u5377\u79ef\uff0c\u5c31\u662f\u666e\u901a\u76841x1\u5377\u79ef\n        pointwise = nn.Conv2d(inplanes, planes, 1, bias=bias)\n        # \u5bf9\u5e94\u7684BN\n        bn_point = norm_layer(planes)\n        # \u662f\u5426\u4f7f\u7528\u6fc0\u6d3b\u51fd\u6570\n        if relu_first:\n            self.block = nn.Sequential(OrderedDict([('relu', nn.ReLU()),\n                                                    ('depthwise', depthwise),\n                                                    ('bn_depth', bn_depth),\n                                                    ('pointwise', pointwise),\n                                                    ('bn_point', bn_point)\n                                                    ]))\n        else:\n            self.block = nn.Sequential(OrderedDict([('depthwise', depthwise),\n                                                    ('bn_depth', bn_depth),\n                                                    ('relu1', nn.ReLU(inplace=True)),\n                                                    ('pointwise', pointwise),\n                                                    ('bn_point', bn_point),\n                                                    ('relu2', nn.ReLU(inplace=True))\n                                                    ]))\n\n    def forward(self, x):\n        return self.block(x)\n")),(0,t.kt)("h3",c({},{id:"\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668global-feature-extrator"}),"\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668(Global Feature Extrator)"),(0,t.kt)("p",null,"\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668\u6a21\u5757\u7684\u76ee\u7684\u5728\u4e8e\u6355\u83b7\u5206\u5272\u56fe\u50cf\u7684\u5168\u5c40\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u8be5\u6a21\u5757\u76f4\u63a5\u5c06\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757\u7684\u7ed3\u679c(\u5206\u8fa8\u7387\u4e3a\u539f\u56fe\u7684",(0,t.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,t.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,t.kt)("semantics",{parentName:"math"},(0,t.kt)("mrow",{parentName:"semantics"},(0,t.kt)("mfrac",{parentName:"mrow"},(0,t.kt)("mn",{parentName:"mfrac"},"1"),(0,t.kt)("mn",{parentName:"mfrac"},"8"))),(0,t.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"\\frac 18")))),(0,t.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"1.1901em",verticalAlign:"-0.345em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),(0,t.kt)("span",c({parentName:"span"},{className:"mopen nulldelimiter"})),(0,t.kt)("span",c({parentName:"span"},{className:"mfrac"}),(0,t.kt)("span",c({parentName:"span"},{className:"vlist-t vlist-t2"}),(0,t.kt)("span",c({parentName:"span"},{className:"vlist-r"}),(0,t.kt)("span",c({parentName:"span"},{className:"vlist",style:{height:"0.8451em"}}),(0,t.kt)("span",c({parentName:"span"},{style:{top:"-2.655em"}}),(0,t.kt)("span",c({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),(0,t.kt)("span",c({parentName:"span"},{className:"mord mtight"}),(0,t.kt)("span",c({parentName:"span"},{className:"mord mtight"}),"8")))),(0,t.kt)("span",c({parentName:"span"},{style:{top:"-3.23em"}}),(0,t.kt)("span",c({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"frac-line",style:{borderBottomWidth:"0.04em"}}))),(0,t.kt)("span",c({parentName:"span"},{style:{top:"-3.394em"}}),(0,t.kt)("span",c({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),(0,t.kt)("span",c({parentName:"span"},{className:"mord mtight"}),(0,t.kt)("span",c({parentName:"span"},{className:"mord mtight"}),"1"))))),(0,t.kt)("span",c({parentName:"span"},{className:"vlist-s"}),"\u200b")),(0,t.kt)("span",c({parentName:"span"},{className:"vlist-r"}),(0,t.kt)("span",c({parentName:"span"},{className:"vlist",style:{height:"0.345em"}}),(0,t.kt)("span",{parentName:"span"}))))),(0,t.kt)("span",c({parentName:"span"},{className:"mclose nulldelimiter"}))))))),")\u4f5c\u4e3a\u800c\u8f93\u5165\u3002\u8be5\u6a21\u5757\u5f15\u5165\u4e86MobileNet-V2\u4e2d\u63d0\u51fa\u7684\u6709\u6548\u7684\u74f6",(0,t.kt)("strong",{parentName:"p"},"\u9888\u6b8b\u5dee\u7f51\u7edc(efficient bottleneck residual blocks)"),"\u3002\u5f53\u8f93\u5165\u7684\u56fe\u50cf\u548c\u8f93\u51fa\u7684\u56fe\u50cf\u5c3a\u5bf8\u76f8\u540c\u65f6\uff0c\u4f7f\u7528\u6b8b\u5dee\u8fde\u63a5\u94fe\u63a5\u74f6\u9888\u6b8b\u5dee\u5757\u3002"),(0,t.kt)("p",null,"\u5728\u74f6\u9888\u6b8b\u5dee\u5757\u4e2d\u4f7f\u7528\u4e86\u6709\u6548\u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u53c2\u6570\u91cf\u548c\u6d6e\u70b9\u6570\u8fd0\u7b97\u3002\u6700\u540e\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u91d1\u5b57\u5854\u6c60\u5316\u6a21\u5757(pyramid pooling module \u7b80\u79f0PPM)\uff0c\u7528\u4e8e\u6c47\u603b\u57fa\u4e8e\u4e0d\u540c\u533a\u57df\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002"),(0,t.kt)("p",null,"\u5728\u5404\u5c42\u7684\u8be6\u7ec6\u53c2\u6570\u5982\u4e0b\u8868\uff1a"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image-20210512135253006",src:a(49080).Z,width:"589",height:"605"})),(0,t.kt)("p",null,"\u6bcf\u4e00\u6761\u6a2a\u7ebf\u5206\u522b\u8868\u793a\uff0c\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757\uff0c\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668\uff0c\u7279\u5f81\u878d\u5408\uff0c\u5206\u7c7b\u56db\u4e2a\u603b\u4f53\u6a21\u5757"),(0,t.kt)("p",null,"\u5176\u4e2dt,c,n,s\u5206\u522b\u8868\u793a\u74f6\u9888\u5757\u7684\u62d3\u5c55\u56e0\u5b50\uff0c\u8f93\u5165\u901a\u9053\u6570\uff0c\u4f7f\u7528\u8be5\u5c42\u7684\u6b21\u6570\uff0c\u6b65\u957f"),(0,t.kt)("p",null,"\u74f6\u9888\u5757\u7684\u53c2\u6570\u8868\uff1a"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image-20210512135638073",src:a(59841).Z,width:"608",height:"284"})),(0,t.kt)("p",null,"\u74f6\u9888\u6b8b\u5dee\u5757\u5c06\u8f93\u5165\u4e3ac\u7684\u56fe\u50cf\u8f6c\u5316\u4e3a\u5177\u6709\u62d3\u5c55\u56e0\u5b50t\u7684c`"),(0,t.kt)("p",null,"\u6700\u540e\u7684\u70b9\u5377\u79ef\u4e0d\u9002\u7528\u975e\u7ebf\u6027\u51fd\u6570f"),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),'# \u4e3b\u7f51\u7edc\u58f0\u660e\nself.global_feature_extractor = GlobalFeatureExtractor(64, [64, 96, 128], 128, 6, [3, 3, 3],norm_layer=self.norm_layer)\n\n# \u5168\u5c40\u7279\u5f81\u63d0\u53d6\u5668\u5bf9\u5e94\u7684\u6a21\u5757\u7c7b\nclass GlobalFeatureExtractor(nn.Module):\n    """Global feature extractor module"""\n    # \u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u6bcf\u4e00\u5c42\u7684\u901a\u9053\u6570\uff0c\u8f93\u51fa\u7684\u901a\u9053\u6570\uff0c\u62d3\u5c55\u56e0\u5b50t\uff0c\u5757\u5728\u6bcf\u4e00\u5c42\u7684\u6570\u91cf\n    def __init__(self, in_channels=64, block_channels=(64, 96, 128), out_channels=128,\n                 t=6, num_blocks=(3, 3, 3), norm_layer=nn.BatchNorm2d):\n        super(GlobalFeatureExtractor, self).__init__()\n        # \u521b\u5efa\u74f6\u9888\u6b8b\u5dee\u5757\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684InvertedResidual\u53eb\u505a\u53cd\u5411\u6b8b\u5dee\u3002\n        # \u53ea\u6709\u6b65\u957f\u4e3a1\u5e76\u4e14\u8f93\u5165\u901a\u9053\u548c\u8f93\u51fa\u901a\u9053\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u8fd9\u5404\u4e2a\u53cd\u5411\u6b8b\u5dee\u624d\u4f1a\u4f7f\u7528\u6b8b\u5dee\u8fde\u63a5\n        self.bottleneck1 = self._make_layer(InvertedResidual, in_channels, block_channels[0], num_blocks[0],\n                                            t, 2, norm_layer=norm_layer)\n        self.bottleneck2 = self._make_layer(InvertedResidual, block_channels[0], block_channels[1],\n                                            num_blocks[1], t, 2, norm_layer=norm_layer)\n        self.bottleneck3 = self._make_layer(InvertedResidual, block_channels[1], block_channels[2],\n                                            num_blocks[2], t, 1, norm_layer=norm_layer)\n        # \u505a\u4e00\u4e2a\u91d1\u5b57\u5854\u6c60\u5316\n        self.ppm = PyramidPooling(block_channels[2], norm_layer=norm_layer)\n        # \u6700\u540e\u4f7f\u75281x1\u5377\u79ef\u8f93\u51fa\u6210\u5bf9\u5e94\u7684\u901a\u9053\uff0c\u8fdb\u884c\u8f93\u51fa\n        self.out = _ConvBNReLU(block_channels[2] * 2, out_channels, 1, norm_layer=norm_layer)\n\n    def _make_layer(self, block, inplanes, planes, blocks, t=6, stride=1, norm_layer=nn.BatchNorm2d):\n        # \u4f7f\u7528\u7684\u6a21\u5757\uff0c\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u8f93\u51fa\u7684\u901a\u9053\u6570\uff0c\u5757\u7684\u6570\u91cf\uff0c\u62d3\u5c55\u56e0\u5b50t\uff0c\u6b65\u957f\n        # \u521d\u59cb\u5316\u4e00\u4e2a\u5bb9\u5668\n        layers = []\n        # \u5c06\u5757\u4e2d\u7684\u4fe1\u606f\u52a0\u5165\n        layers.append(block(inplanes, planes, stride, t, norm_layer=norm_layer))\n        # \u91cd\u590d\u8fd9\u4e2a\u5757\u5bf9\u5e94\u6b21\n        for i in range(1, blocks):\n            layers.append(block(planes, planes, 1, t, norm_layer=norm_layer))\n        #  \u5c06\u5bf9\u5e94\u7684\u5185\u5bb9\u653e\u5165Sequential\u5bb9\u5668\u4e2d\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.bottleneck1(x)\n        x = self.bottleneck2(x)\n        x = self.bottleneck3(x)\n        x = self.ppm(x)\n        x = self.out(x)\n        return x\n')),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),"# \u53cd\u5411\u5377\u79ef\u5757\nclass InvertedResidual(nn.Module):\n    def __init__(self, in_channels, out_channels, stride, expand_ratio, dilation=1, norm_layer=nn.BatchNorm2d):\n        # \u53c2\u6570\uff1a\u8f93\u5165\u901a\u9053\uff0c\u8f93\u51fa\u901a\u9053\uff0c\u6b65\u957f\uff0c\u62d3\u5c55\u56e0\u5b50\uff0c\u7a7a\u6d1e\u5377\u79ef\uff0c\n        super(InvertedResidual, self).__init__()\n        assert stride in [1, 2]\n        # \u662f\u5426\u4f7f\u7528\u6b8b\u5dee\u8fde\u63a5\n        self.use_res_connect = stride == 1 and in_channels == out_channels\n\n        layers = list()\n        # \u4e2d\u95f4\u7684\u901a\u9053\u6570\uff0c\u4f7f\u7528\u62d3\u5c55\u56e0\u5b50*\u8f93\u5165\u7684\u901a\u9053\u6570\n        inter_channels = int(round(in_channels * expand_ratio))\n        if expand_ratio != 1:\n            # pw\n            # \u5148\u505a\u4e00\u4e2a\u6807\u51c6\u5377\u79ef\u561b\uff0c\u4f7f\u7528\u4e2d\u95f4\u901a\u9053\u6570\u4f5c\u4e3a\u8f93\u51fa,1x1\u5377\u79ef\n            layers.append(_ConvBNReLU(in_channels, inter_channels, 1, relu6=True, norm_layer=norm_layer))\n        layers.extend([\n            # dw \u8fd9\u91cc\u4f7f\u7528\u4e86\u5206\u7ec4\u5377\u79ef\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u548c\u666e\u901a\u7684\u5377\u79ef\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u5982\u679cgroups\u6574\u597d\u662f\u8f93\u5165\u901a\u9053\u6570\u7684\u4e00\u4e2a\u56e0\u7d20\uff0c\u5219\u8f93\u5165\u7684\u901a\u9053\u4f1a\u88ab\u5206\u6210\u5bf9\u5e94\u7684\u7ec4\u8fdb\u884c\u5377\u79ef\n            _ConvBNReLU(inter_channels, inter_channels, 3, stride, dilation, dilation,\n                        groups=inter_channels, relu6=True, norm_layer=norm_layer),\n            # pw-linear\n            # \u4f7f\u75281x1\u5377\u79ef\u5c06\u4e2d\u95f4\u901a\u9053\u6570\u8f6c\u5316\u6210\u6700\u7ec8\u7684\u901a\u9053\u6570\n            nn.Conv2d(inter_channels, out_channels, 1, bias=False),\n            norm_layer(out_channels)])\n        self.conv = nn.Sequential(*layers)\n\n    def forward(self, x):\n        # \u6b8b\u5dee\u8fde\u63a5\n        if self.use_res_connect:\n            return x + self.conv(x)\n        else:\n            return self.conv(x)\n")),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),"# PPM(\u91d1\u5b57\u5854\u6c60\u5316\u6a21\u5757)\nclass PyramidPooling(nn.Module):\n    def __init__(self, in_channels, sizes=(1, 2, 3, 6), norm_layer=nn.BatchNorm2d, **kwargs):\n        super(PyramidPooling, self).__init__()\n        # \u5b9a\u4e49\u8f93\u51fa\u4e3a\u8f93\u5165\u7684\u56db\u5206\u4e4b\u4e00\n        out_channels = int(in_channels / 4)\n        # \u521b\u5efa\u5e73\u5747\u6c60\u5316\u548c\u5377\u79ef\u5c42\u6a21\u5757\u5217\u8868\n        self.avgpools = nn.ModuleList()\n        self.convs = nn.ModuleList()\n        # \u904d\u5386\u5e73\u5747\u6c60\u5316\u7684\u5c3a\u5bf8\n        for size in sizes:\n            # \u4f7f\u7528\u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316\uff0c\u8fd9\u91cc\u7684\u53c2\u6570\uff0c\u8868\u793a\u7ecf\u8fc7\u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316\u7684\u7279\u5f81\u56fe\u8f93\u5165\u4e3ac X h X w\uff0c\u51fa\u6765\u7684\u7ed3\u679c\u4e3ac X size X size\n            self.avgpools.append(nn.AdaptiveAvgPool2d(size))\n            # \u4f7f\u7528\u666e\u901a\u5377\u79ef\u5c42\u8fdb\u884c\u5377\u79ef1x1\u7684\u5377\u79ef\u6838\n            self.convs.append(_ConvBNReLU(in_channels, out_channels, 1, norm_layer=norm_layer, **kwargs))\n\n    def forward(self, x):\n        size = x.size()[2:]\n        feats = [x]\n        for (avgpool, conv) in zip(self.avgpools, self.convs):\n            # \u6ca1\u8bb0\u9519\u7684\u8bddinterpolate\u5e94\u8be5\u662f\u4e0a\u91c7\u6837\u5230size\u7684\u5927\u5c0f\n            feats.append(F.interpolate(conv(avgpool(x)), size, mode='bilinear', align_corners=True))\n        # \u8bb0\u5f55\u5b8c\u5e73\u5747\u6c60\u5316\u7684\u7ed3\u679c\u540e\uff0c\u5c31\u8fdb\u884c\u62fc\u63a5\n        return torch.cat(feats, dim=1)\n")),(0,t.kt)("h3",c({},{id:"\u7279\u5f81\u878d\u5408\u6a21\u5757feature-fusion-module"}),"\u7279\u5f81\u878d\u5408\u6a21\u5757(Feature Fusion Module)"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image-20210512140501709",src:a(680).Z,width:"589",height:"293"})),(0,t.kt)("p",null,"\u5148\u524d\u4e0b\u91c7\u6837\u5b66\u4e60\u6a21\u5757\u8ba1\u7b97\u7684\u7279\u5f81\u56fe\uff08\u8868\u7684\u5de6\u8fb9\uff09\u53ea\u7ecf\u8fc7\u4e00\u4e2a",(0,t.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,t.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,t.kt)("semantics",{parentName:"math"},(0,t.kt)("mrow",{parentName:"semantics"},(0,t.kt)("mn",{parentName:"mrow"},"1"),(0,t.kt)("mo",{parentName:"mrow"},"\xd7"),(0,t.kt)("mn",{parentName:"mrow"},"1")),(0,t.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"1 \\times 1")))),(0,t.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"))))),"\u7684\u5377\u79ef\u5373\u53ef\uff0c\u5728x\u6b21\u4e0b\u91c7\u6837\u540e\u7684\u7ed3\u679c(\u7ecf\u8fc7\u5168\u5c40\u7279\u5f81\u63d0\u53d6\u6a21\u5757\u7684\u7279\u5f81\u56fe\uff0c\u8868\u7684\u53f3\u8fb9)\uff0c\u4e0a\u91c7\u6837X\u6b21\uff0c\u4f7f\u7528\u53ef\u5206\u79bb\u5377\u79ef\u548c\u4e00\u4e2a\u975e\u7ebf\u6027\u51fd\u6570\uff0c\u518d\u4f7f\u7528\u4e00\u4e2a",(0,t.kt)("span",c({parentName:"p"},{className:"math math-inline"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex"}),(0,t.kt)("span",c({parentName:"span"},{className:"katex-mathml"}),(0,t.kt)("math",c({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),(0,t.kt)("semantics",{parentName:"math"},(0,t.kt)("mrow",{parentName:"semantics"},(0,t.kt)("mn",{parentName:"mrow"},"1"),(0,t.kt)("mo",{parentName:"mrow"},"\xd7"),(0,t.kt)("mn",{parentName:"mrow"},"1")),(0,t.kt)("annotation",c({parentName:"semantics"},{encoding:"application/x-tex"}),"1 \\times1")))),(0,t.kt)("span",c({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mbin"}),"\xd7"),(0,t.kt)("span",c({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222em"}}))),(0,t.kt)("span",c({parentName:"span"},{className:"base"}),(0,t.kt)("span",c({parentName:"span"},{className:"strut",style:{height:"0.6444em"}})),(0,t.kt)("span",c({parentName:"span"},{className:"mord"}),"1"))))),"\u7684\u5377\u79ef\uff0c\u6700\u540e\u5c06\u4e24\u4e2a\u7279\u5f81\u56fe\u52a0\u8d77\u6765\uff0c\u518d\u4f7f\u7528\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570f"),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),'# \u5728\u4e3b\u7c7b\u4e2d\u7684\u58f0\u660e\uff1a\nself.feature_fusion = FeatureFusionModule(64, 128, 128, norm_layer=self.norm_layer)\n\n# \u7279\u5f81\u878d\u5408\u6a21\u5757\nclass FeatureFusionModule(nn.Module):\n    """Feature fusion module"""\n    # \u8f93\u5165\u7684\u53c2\u6570\u4e3a\u9ad8\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u4f4e\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u8f93\u51fa\u7684\u901a\u9053\u6570\n    def __init__(self, highter_in_channels, lower_in_channels, out_channels, scale_factor=4, norm_layer=nn.BatchNorm2d):\n        super(FeatureFusionModule, self).__init__()\n        # \u8bbe\u7f6e\u89c4\u6a21\n        self.scale_factor = scale_factor\n        # \u4f7f\u7528\u666e\u901a\u5377\u79ef\u5c06\u4f4e\u901a\u9053\u6570\u8f6c\u5316\u6210\u8f93\u51fa\u7684\u901a\u9053\u6570\n        self.dwconv = _ConvBNReLU(lower_in_channels, out_channels, 1, norm_layer=norm_layer)\n        # \u518d\u5bf9\u4f4e\u7ef4\u5377\u79ef\u7684\u5c06\u8bf6\u8fc7\u518d\u505a\u4e00\u4e2a1x1\u5377\u79ef\uff0c\u4f46\u662f\u4e0d\u6fc0\u6d3b\n        self.conv_lower_res = nn.Sequential(\n            nn.Conv2d(out_channels, out_channels, 1),\n            norm_layer(out_channels)\n        )\n        # \u5bf9\u9ad8\u7ef4\u5ea6\u7684\u5377\u79ef\uff0c\u53ea\u4f7f\u75281x1\u5377\u79ef\uff0c\u4e0d\u4f7f\u7528\u6fc0\u6d3b\u51fd\u6570\n        self.conv_higher_res = nn.Sequential(\n            nn.Conv2d(highter_in_channels, out_channels, 1),\n            norm_layer(out_channels)\n        )\n        self.relu = nn.ReLU(True)\n\n    def forward(self, higher_res_feature, lower_res_feature):\n        # \u5148\u5c06\u4f4e\u7ef4\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u5230\u73b0\u5728\u76844\u500d\n        lower_res_feature = F.interpolate(lower_res_feature, scale_factor=4, mode=\'bilinear\', align_corners=True)\n        # \u5c06\u4f4e\u7eac\u5ea6\u7684\u901a\u9053\u6570\u8f6c\u5316\u6210\u8f93\u51fa\u7684\u901a\u9053\u6570\n        lower_res_feature = self.dwconv(lower_res_feature)\n        # \u518d\u505a\u4e00\u6b211x1\u5377\u79ef\uff0c\u4f46\u662f\u4e0d\u6fc0\u6d3b\n        lower_res_feature = self.conv_lower_res(lower_res_feature)\n        # \u5bf9\u9ad8\u7eac\u5ea6\u8fdb\u884c1x1\u5377\u79ef\uff0c\u4f46\u662f\u4e0d\u6fc0\u6d3b\n        higher_res_feature = self.conv_higher_res(higher_res_feature)\n        # \u5c06\u4f4e\u7eac\u5ea6\u548c\u9ad8\u7eac\u5ea6\u52a0\u8d77\u6765\n        out = higher_res_feature + lower_res_feature\n        # \u6700\u540e\u6fc0\u6d3b\u4ed6\u5c31\u884c\n        return self.relu(out)\n')),(0,t.kt)("h3",c({},{id:"\u5206\u7c7b\u6a21\u5757classifier"}),"\u5206\u7c7b\u6a21\u5757(classifier)"),(0,t.kt)("p",null,"\u5728\u5206\u7c7b\u6a21\u5757\u4e2d\u91c7\u7528\u4e24\u4e2a\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef(DSConv)\u548c\u4e00\u4e2a\u666e\u901a\u5377\u79ef(Conv2D\uff0c\u7ea0\u6b63\u4e00\u4e0b\uff0c\u4e4b\u524d\u8bf4\u8fc7\u7684\u70b9\u5377\u79ef\u662fConv2D)\u3002"),(0,t.kt)("p",null,"\u4e3a\u4e86\u9002\u5e94\u68af\u5ea6\u4e0b\u964d\uff0c\u6240\u4ee5\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528\u4e86Softmax\u6fc0\u6d3b\u51fd\u6570\uff0c\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d,\u7531\u4e8eargmax\u548csorftmax\u90fd\u662f\u5355\u8c03\u9012\u589e\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u4f7f\u7528argmax\u4ee3\u66ffsoftmax\u51cf\u5c0f\u8ba1\u7b97\u5f00\u9500\u3002"),(0,t.kt)("p",null,"\u5982\u679c\u9700\u8981Fast-SCNN\u7684\u6982\u7387\u6a21\u578b\uff0c\u624d\u5728\u63a8\u7406\u65f6\u4f7f\u7528softmax\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",c({parentName:"pre"},{className:"language-python"}),'# \u5728\u4e3b\u7c7b\u4e2d\u7684\u58f0\u660e\uff1a\nself.classifier = Classifer(128, self.nclass, norm_layer=self.norm_layer)\n\n# \u5206\u7c7b\u6a21\u5757\nclass Classifer(nn.Module):\n    """Classifer"""\n\n    def __init__(self, dw_channels, num_classes, stride=1, norm_layer=nn.BatchNorm2d):\n        # \u53c2\u6570\uff1a\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u5206\u7c7b\u6570\uff0c\u6b65\u957f\uff0cBN\n        super(Classifer, self).__init__()\n        # \u4f7f\u75282\u4e2a\u6df1\u5ea6\u5206\u79bb\u5377\u79ef\n        self.dsconv1 = SeparableConv2d(dw_channels, dw_channels, stride=stride, relu_first=False,\n                                       norm_layer=norm_layer)\n        self.dsconv2 = SeparableConv2d(dw_channels, dw_channels, stride=stride, relu_first=False,\n                                       norm_layer=norm_layer)\n        # \u8bbe\u7f6e\u968f\u673a\u5931\u6d3b(dropout2d)\uff0c\u7136\u540e\u8fdb\u884c\u5377\u79ef\uff0c\u4e0d\u9002\u7528BN\u4e0d\u4f7f\u7528\uff0c\u6fc0\u6d3b\uff0c\u4f7f\u75281x1\u5377\u79ef\n        self.conv = nn.Sequential(\n            nn.Dropout2d(0.1),\n            nn.Conv2d(dw_channels, num_classes, 1)\n        )\n\n    def forward(self, x):\n        x = self.dsconv1(x)\n        x = self.dsconv2(x)\n        x = self.conv(x)\n        return x\n\n')))}y.isMDXComponent=!0},46787:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/20210512115432image-20210512115431363-8b07afb94ccde452a6dab34ccab31f03.png"},49080:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/20210512135254image-20210512135253006-8e3187b39e460a68e95ff086d6620e1c.png"},59841:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/20210512135639image-20210512135638073-e257ea56e14e1b3ca99209ef94568de9.png"},680:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/20210512140504image-20210512140501709-7bfa11894d62108b2f55253f2c4c2660.png"},85705:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/20210516102348image-20210516102346560-f458274bcf7fd14e3c04c304ec5caeaf.png"}}]);